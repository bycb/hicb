(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{537:function(e,a,t){"use strict";t.r(a);var s=t(8),r=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h3",{attrs:{id:"准备工作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[e._v("#")]),e._v(" 准备工作")]),e._v(" "),t("p",[e._v("1、为了方便使用虚拟机。系统版本:CentOS-7-x86_64-DVD-2009.最少3台。配置要求：2核3G。")]),e._v(" "),t("p",[e._v("2、对系统环境进行配置，以下命令3台机器都需要执行。")]),e._v(" "),t("p",[e._v("4、保证3台机器属于同一局域网，并且可以访问公网。节点名称对应ipr如下：")]),e._v(" "),t("p",[e._v("master节点：192.168.18.132        node1:192.168.18.133    node2:192.168.18.134")]),e._v(" "),t("h4",{attrs:{id:"关闭防火墙"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关闭防火墙"}},[e._v("#")]),e._v(" 关闭防火墙")]),e._v(" "),t("p",[e._v("关闭防火墙禁用开机自启。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("systemctl stop firewalld\nsystemctl disable firewalld\n")])])]),t("h4",{attrs:{id:"关闭selinux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关闭selinux"}},[e._v("#")]),e._v(" 关闭selinux")]),e._v(" "),t("p",[e._v("关闭selinux,一种永久关闭，一种临时关闭。我执行永久关闭")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#永久\nsed -i 's/enforcing/disabled/' /etc/selinux/config \n#临时\nsetenforce 0 \n")])])]),t("h4",{attrs:{id:"关闭swap"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#关闭swap"}},[e._v("#")]),e._v(" 关闭swap")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("free -g #查看\nswapoff -a #临时关闭\nvim /etc/fstab #永久关闭需重启\n")])])]),t("h4",{attrs:{id:"更改主机名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#更改主机名"}},[e._v("#")]),e._v(" 更改主机名")]),e._v(" "),t("p",[e._v("一台master,两台node分别为node1和node2。并且给master节点增加hosts（只给master）")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("#更改master节点名称\nhostnamectl set-hostname k8s-master\n#重新加载使其生效\nbash\n\n#在master节点添加hosts（只给master）\nvi /etc/hosts\n#内容如下，ip与节点名对应\n192.168.18.132 k8s-master\n192.168.18.133 k8s-node1\n192.168.18.134 k8s-node2\n\n#更改node1节点名称\nhostnamectl set-hostname k8s-node1\n#重新加载使其生效\nbash\n\n#更改node2节点名称\nhostnamectl set-hostname k8s-node2\n#重新加载使其生效\nbash\n")])])]),t("h4",{attrs:{id:"将桥接的ipv4流量传递到iptable的链"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#将桥接的ipv4流量传递到iptable的链"}},[e._v("#")]),e._v(" 将桥接的iPv4流量传递到iptable的链")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("vi /etc/sysctl.d/k8s.config\n\n#内容如下\nnet.bridge.bridge-nf-call-ip6tables = 1\nnet.bridge.bridge-nf-call-iptables = 1\n\n# 加载配置文件\nsysctl --system\n")])])]),t("h4",{attrs:{id:"时间同步"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#时间同步"}},[e._v("#")]),e._v(" 时间同步")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yum install ntpdate -y\nntpdate time.windows.com\n")])])]),t("h4",{attrs:{id:"安装docker并启动"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装docker并启动"}},[e._v("#")]),e._v(" 安装docker并启动")]),e._v(" "),t("p",[e._v("安装步骤不在多说，参考docker相关文章")]),e._v(" "),t("p",[e._v("https://hicb.gitee.io/docker/nraed93tov")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("sudo service docker restart\n")])])]),t("h4",{attrs:{id:"配置阿里云源"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置阿里云源"}},[e._v("#")]),e._v(" 配置阿里云源")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cat <<EOF > /etc/yum.repos.d/kubernetes.repo\n\n#内容如下\n[kubernetes]\nname=Kubernetes\nbaseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=1\ngpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg\nEOF\n")])])]),t("h4",{attrs:{id:"安装kubeadm-kubelet和kubectl"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#安装kubeadm-kubelet和kubectl"}},[e._v("#")]),e._v(" 安装kubeadm,kubelet和kubectl")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("yum install -y kubelet-1.19.0 kubeadm-1.19.0 kubectl-1.19.0\n\n#由于官网未开放同步方式, 可能会有索引gpg检查失败的情况, 这时请用\nyum install -y --nogpgcheck kubelet kubeadm kubectl\n#开机启动\nsystemctl enable kubelet\n")])])]),t("p",[e._v("至此，所需环境准备完成，下一步搭建master节点")]),e._v(" "),t("h3",{attrs:{id:"master节点初始化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#master节点初始化"}},[e._v("#")]),e._v(" master节点初始化")]),e._v(" "),t("p",[e._v("apiserver-advertise-address 主节点的ip地址")]),e._v(" "),t("p",[e._v("image-repository 镜像地址")]),e._v(" "),t("p",[e._v("kubernetes-version版本应与kubeadm版本一致")]),e._v(" "),t("p",[e._v("pod-network-cidr 部署网络时会用到")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubeadm init \\\n--apiserver-advertise-address=192.168.18.132 \\\n--image-repository registry.aliyuncs.com/google_containers \\\n--kubernetes-version v1.23.4 \\\n--service-cidr=10.96.0.0/12 \\\n--pod-network-cidr=10.244.0.0/16 \\\n--ignore-preflight-errors=all\n")])])]),t("h4",{attrs:{id:"问题及解决方案"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题及解决方案"}},[e._v("#")]),e._v(" 问题及解决方案：")]),e._v(" "),t("p",[e._v("问题：")]),e._v(" "),t("p",[e._v("The HTTP call equal to 'curl -sSL http://localhost:10248/healthz' failed with error: Get \"http://localhost:10248/healthz\": dial tcp [::1]:10248: connect: connection refused.")]),e._v(" "),t("p",[e._v("原因是之前我的Docker是用yum安装的，docker的cgroup驱动程序默认设置为systemd。默认情况下Kubernetes cgroup为system，我们需要更改Docker cgroup驱动")]),e._v(" "),t("p",[e._v("解决方法：")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('vim /etc/docker/daemon.json\n#内容如下\n{\n  "exec-opts": ["native.cgroupdriver=systemd"]\n}\n#重启docker并且kubeadm重置后再次执行init\nsystemctl restart docker\nkubeadm reset\n')])])]),t("h4",{attrs:{id:"配置文件拷贝"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#配置文件拷贝"}},[e._v("#")]),e._v(" 配置文件拷贝")]),e._v(" "),t("p",[e._v("在初始化完成后，会提示需要拷贝配置文件到默认路径下，至此可以进行集群管理了。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v(" mkdir -p $HOME/.kube\n  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config\n  sudo chown $(id -u):$(id -g) $HOME/.kube/config\n")])])]),t("h3",{attrs:{id:"部署网络"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署网络"}},[e._v("#")]),e._v(" 部署网络")]),e._v(" "),t("p",[e._v("下载yaml文件")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("wget https://docs.projectcalico.org/manifests/calico.yaml\n")])])]),t("p",[e._v("更改其中的CALICO_IPV4POOL_CIDR变量值,更改为init时的pod-network-cidr变量的值10.244.0.0/16，更改完成后")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl apply -f calico.yaml\n")])])]),t("h4",{attrs:{id:"问题及解决"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#问题及解决"}},[e._v("#")]),e._v(" 问题及解决")]),e._v(" "),t("p",[e._v("如果下载失败，则需要手动拉取。查看所需镜像")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("cat calico.yaml |grep image\n\n#手动拉取\ndocker pull calico/cni:v3.22.1\ndocker pull calico/pod2daemon-flexvol:v3.22.1\ndocker pull calico/node:v3.22.1\ndocker pull calico/kube-controllers:v3.22.1\n")])])]),t("h3",{attrs:{id:"加入节点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#加入节点"}},[e._v("#")]),e._v(" 加入节点")]),e._v(" "),t("p",[e._v("在node1和node2节点中执行以下命令。")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("sudo yum install -y \nkubeadm join 192.168.18.132:6443 --token yl4z8b.rufwz67v4f58fx3f \\\n\t--discovery-token-ca-cert-hash sha256:5ad823d0773b1e437711e4a929aaa2e9390899b8d6a2c1b634f4c7e9f44dd123\n")])])]),t("p",[e._v("查看节点")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl get pods -n kube-system\n")])])]),t("p",[e._v("日志")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("//kubelet日志\njournalctl -u kubelet > a\n")])])]),t("h3",{attrs:{id:"部署dashboard"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#部署dashboard"}},[e._v("#")]),e._v(" 部署dashboard")]),e._v(" "),t("p",[e._v("下载yaml文件,增加 type:NodeProt属性")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("wget https://raw.fastgit.org//kubernetes/dashboard/v2.5.0/aio/deploy/recommended.yaml\n")])])]),t("p",[e._v("运行")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl apply -f recommended.yaml\n")])])]),t("p",[e._v("查看端口")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl get pods,svc -n kubernetes-dashboard\n")])])]),t("p",[e._v("创建用户")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl create serviceaccount dashboard-admin -n kube-system\n")])])]),t("p",[e._v("用户授权")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl create clusterrolebinding dashboard-admin --clusterrole=cluster-admin --serviceaccount=kube-system:dashboard-admin\n")])])]),t("p",[e._v("获取token")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk '/dashboard-admin/{print$1}')\n")])])]),t("p",[e._v("重启")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("kubectl replace --force -f recommended.yaml\n#查看dashboard运行在那台机器上面\nkubectl get pods -n kube-system -o wide\n\n")])])]),t("copyright")],1)}),[],!1,null,null,null);a.default=r.exports}}]);