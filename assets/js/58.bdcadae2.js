(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{577:function(e,t,a){"use strict";a.r(t);var s=a(8),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),a("p",[e._v("为了让程序有价值，我们需要能够处理最简单的数据单元：数字，字符串，结构体，布尔值等。 TypeScript支持与JavaScript几乎相同的数据类型，此外还提供了实用的枚举类型方便我们使用。")]),e._v(" "),a("h2",{attrs:{id:"布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#布尔值"}},[e._v("#")]),e._v(" 布尔值")]),e._v(" "),a("p",[e._v("最基本的数据类型就是简单的true/false值，在JavaScript和TypeScript里叫做"),a("code",[e._v("boolean")]),e._v("（其它语言中也一样）。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let isDone: boolean = false;\n")])])]),a("h2",{attrs:{id:"数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数字"}},[e._v("#")]),e._v(" 数字")]),e._v(" "),a("p",[e._v("和JavaScript一样，TypeScript里的所有数字都是浮点数。 这些浮点数的类型是"),a("code",[e._v("number")]),e._v("。 除了支持十进制和十六进制字面量，Typescript还支持ECMAScript 2015中引入的二进制和八进制字面量。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let decLiteral: number = 6;\nlet hexLiteral: number = 0xf00d;\nlet binaryLiteral: number = 0b1010;\nlet octalLiteral: number = 0o744;\n")])])]),a("h2",{attrs:{id:"字符串"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#字符串"}},[e._v("#")]),e._v(" 字符串")]),e._v(" "),a("p",[e._v("JavaScript程序的另一项基本操作是处理网页或服务器端的文本数据。 像其它语言里一样，我们使用"),a("code",[e._v("string")]),e._v("表示文本数据类型。 和JavaScript一样，可以使用双引号（"),a("code",[e._v('"')]),e._v("）或单引号（"),a("code",[e._v("'")]),e._v("）表示字符串。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let name: string = "bob";\nname = "smith";\n')])])]),a("p",[e._v("你还可以使用"),a("em",[e._v("模版字符串")]),e._v("，它可以定义多行文本和内嵌表达式。 这种字符串是被反引号包围（"),a("code",[e._v("`")]),e._v(" ），并且以"),a("code",[e._v("${ expr }")]),e._v("这种形式嵌入表达式")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let name: string = `Gene`;\nlet age: number = 37;\nlet sentence: string = `Hello, my name is ${ name }.\n\nI'll be ${ age + 1 } years old next month.`;\n")])])]),a("p",[e._v("这与下面定义"),a("code",[e._v("sentence")]),e._v("的方式效果相同：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let sentence: string = "Hello, my name is " + name + ".\\n\\n" +\n    "I\'ll be " + (age + 1) + " years old next month.";\n')])])]),a("h2",{attrs:{id:"数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数组"}},[e._v("#")]),e._v(" 数组")]),e._v(" "),a("p",[e._v("TypeScript像JavaScript一样可以操作数组元素。 有两种方式可以定义数组。 第一种，可以在元素类型后面接上"),a("code",[e._v("[]")]),e._v("，表示由此类型元素组成的一个数组：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let list: number[] = [1, 2, 3];\n")])])]),a("p",[e._v("第二种方式是使用数组泛型，"),a("code",[e._v("Array<元素类型>")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let list: Array<number> = [1, 2, 3];\n")])])]),a("h2",{attrs:{id:"元组-tuple"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元组-tuple"}},[e._v("#")]),e._v(" 元组 Tuple")]),e._v(" "),a("p",[e._v("元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同。 比如，你可以定义一对值分别为"),a("code",[e._v("string")]),e._v("和"),a("code",[e._v("number")]),e._v("类型的元组。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Declare a tuple type\nlet x: [string, number];\n// Initialize it\nx = ['hello', 10]; // OK\n// Initialize it incorrectly\nx = [10, 'hello']; // Error\n")])])]),a("p",[e._v("当访问一个已知索引的元素，会得到正确的类型：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("console.log(x[0].substr(1)); // OK\nconsole.log(x[1].substr(1)); // Error, 'number' does not have 'substr'\n")])])]),a("p",[e._v("当访问一个越界的元素，会使用联合类型替代：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("x[3] = 'world'; // OK, 字符串可以赋值给(string | number)类型\n\nconsole.log(x[5].toString()); // OK, 'string' 和 'number' 都有 toString\n\nx[6] = true; // Error, 布尔不是(string | number)类型\n")])])]),a("p",[e._v("联合类型是高级主题，我们会在以后的章节里讨论它。")]),e._v(" "),a("h2",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[e._v("#")]),e._v(" 枚举")]),e._v(" "),a("p",[a("code",[e._v("enum")]),e._v("类型是对JavaScript标准数据类型的一个补充。 像C#等其它语言一样，使用枚举类型可以为一组数值赋予友好的名字。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color {Red, Green, Blue};\nlet c: Color = Color.Green;\n")])])]),a("p",[e._v("默认情况下，从"),a("code",[e._v("0")]),e._v("开始为元素编号。 你也可以手动的指定成员的数值。 例如，我们将上面的例子改成从"),a("code",[e._v("1")]),e._v("开始编号：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color {Red = 1, Green, Blue};\nlet c: Color = Color.Green;\n")])])]),a("p",[e._v("或者，全部都采用手动赋值：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color {Red = 1, Green = 2, Blue = 4};\nlet c: Color = Color.Green;\n")])])]),a("p",[e._v("枚举类型提供的一个便利是你可以由枚举的值得到它的名字。 例如，我们知道数值为2，但是不确定它映射到Color里的哪个名字，我们可以查找相应的名字：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Color {Red = 1, Green, Blue};\nlet colorName: string = Color[2];\n\nalert(colorName);\n")])])]),a("h2",{attrs:{id:"任意值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任意值"}},[e._v("#")]),e._v(" 任意值")]),e._v(" "),a("p",[e._v("有时候，我们会想要为那些在编程阶段还不清楚类型的变量指定一个类型。 这些值可能来自于动态的内容，比如来自用户输入或第三方代码库。 这种情况下，我们不希望类型检查器对这些值进行检查而是直接让它们通过编译阶段的检查。 那么我们可以使用"),a("code",[e._v("any")]),e._v("类型来标记这些变量：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let notSure: any = 4;\nnotSure = "maybe a string instead";\nnotSure = false; // okay, definitely a boolean\n')])])]),a("p",[e._v("在对现有代码进行改写的时候，"),a("code",[e._v("any")]),e._v("类型是十分有用的，它允许你在编译时可选择地包含或移除类型检查。 你可能认为"),a("code",[e._v("Object")]),e._v("有相似的作用，就像它在其它语言中那样。 但是"),a("code",[e._v("Object")]),e._v("类型的变量只是允许你给它赋任意值 -- 但是却不能够在它上面调用任意的方法，即便它真的有这些方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let notSure: any = 4;\nnotSure.ifItExists(); // okay, ifItExists might exist at runtime\nnotSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)\n\nlet prettySure: Object = 4;\nprettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.\n")])])]),a("p",[e._v("当你只知道一部分数据的类型时，"),a("code",[e._v("any")]),e._v("类型也是有用的。 比如，你有一个数组，它包含了不同的类型的数据：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let list: any[] = [1, true, "free"];\n\nlist[1] = 100;\n')])])]),a("h2",{attrs:{id:"空值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空值"}},[e._v("#")]),e._v(" 空值")]),e._v(" "),a("p",[e._v("某种程度上来说，"),a("code",[e._v("void")]),e._v("类型像是与"),a("code",[e._v("any")]),e._v("类型相反，它表示没有任何类型。 当一个函数没有返回值时，你通常会见到其返回值类型是"),a("code",[e._v("void")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function warnUser(): void {\n    alert("This is my warning message");\n}\n')])])]),a("p",[e._v("声明一个"),a("code",[e._v("void")]),e._v("类型的变量没有什么大用，因为你只能为它赋予"),a("code",[e._v("undefined")]),e._v("和"),a("code",[e._v("null")]),e._v("：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let unusable: void = undefined;\n")])])]),a("h2",{attrs:{id:"null-和-undefined"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#null-和-undefined"}},[e._v("#")]),e._v(" Null 和 Undefined")]),e._v(" "),a("p",[e._v("TypeScript里，"),a("code",[e._v("undefined")]),e._v("和"),a("code",[e._v("null")]),e._v("两者各自有自己的类型分别叫做"),a("code",[e._v("undefined")]),e._v("和"),a("code",[e._v("null")]),e._v("。 和"),a("code",[e._v("void")]),e._v("相似，它们的本身的类型用处不是很大：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Not much else we can assign to these variables!\nlet u: undefined = undefined;\nlet n: null = null;\n")])])]),a("p",[e._v("默认情况下"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("是所有类型的子类型。 就是说你可以把"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("赋值给"),a("code",[e._v("number")]),e._v("类型的变量。")]),e._v(" "),a("p",[e._v("然而，当你指定了"),a("code",[e._v("--strictNullChecks")]),e._v("标记，"),a("code",[e._v("null")]),e._v("和"),a("code",[e._v("undefined")]),e._v("只能赋值给"),a("code",[e._v("void")]),e._v("和它们各自。 这能避免"),a("em",[e._v("很多")]),e._v("常见的问题。 也许在某处你想传入一个"),a("code",[e._v("string")]),e._v("或"),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("，你可以使用联合类型"),a("code",[e._v("string | null | undefined")]),e._v("。 再次说明，稍后我们会介绍联合类型。")]),e._v(" "),a("blockquote",[a("p",[e._v("注意：我们鼓励尽可能地使用"),a("code",[e._v("--strictNullChecks")]),e._v("，但在本手册里我们假设这个标记是关闭的。")])]),e._v(" "),a("h2",{attrs:{id:"类型断言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型断言"}},[e._v("#")]),e._v(" 类型断言")]),e._v(" "),a("p",[e._v("有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。")]),e._v(" "),a("p",[e._v("通过"),a("em",[e._v("类型断言")]),e._v("这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。")]),e._v(" "),a("p",[e._v("类型断言有两种形式。 其一是“尖括号”语法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let someValue: any = "this is a string";\n\nlet strLength: number = (<string>someValue).length;\n')])])]),a("p",[e._v("另一个为"),a("code",[e._v("as")]),e._v("语法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let someValue: any = "this is a string";\n\nlet strLength: number = (someValue as string).length;\n')])])]),a("p",[e._v("两种形式是等价的。 至于使用哪个大多数情况下是凭个人喜好；然而，当你在TypeScript里使用JSX时，只有"),a("code",[e._v("as")]),e._v("语法断言是被允许的。")]),e._v(" "),a("h2",{attrs:{id:"关于let"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#关于let"}},[e._v("#")]),e._v(" 关于"),a("code",[e._v("let")])]),e._v(" "),a("p",[e._v("你可能已经注意到了，我们使用"),a("code",[e._v("let")]),e._v("关键字来代替大家所熟悉的JavaScript关键字"),a("code",[e._v("var")]),e._v("。 "),a("code",[e._v("let")]),e._v("关键字是JavaScript的一个新概念，TypeScript实现了它。 我们会在以后详细介绍它，很多常见的问题都可以通过使用"),a("code",[e._v("let")]),e._v("来解决，所以尽可能地使用"),a("code",[e._v("let")]),e._v("来代替"),a("code",[e._v("var")]),e._v("吧。")])])}),[],!1,null,null,null);t.default=r.exports}}]);