(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{583:function(t,s,a){"use strict";a.r(s);var n=a(8),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举"}},[t._v("#")]),t._v(" 枚举")]),t._v(" "),a("p",[t._v("使用枚举我们可以定义一些有名字的数字常量。 枚举通过"),a("code",[t._v("enum")]),t._v("关键字来定义。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("enum Direction {\n    Up = 1,\n    Down,\n    Left,\n    Right\n}\n")])])]),a("p",[t._v("一个枚举类型可以包含零个或多个枚举成员。 枚举成员具有一个数字值，它可以是"),a("em",[t._v("常数")]),t._v("或是"),a("em",[t._v("计算得出的值")]),t._v(" 当满足如下条件时，枚举成员被当作是常数：")]),t._v(" "),a("ul",[a("li",[t._v("不具有初始化函数并且之前的枚举成员是常数。 在这种情况下，当前枚举成员的值为上一个枚举成员的值加1。 但第一个枚举元素是个例外。 如果它没有初始化方法，那么它的初始值为"),a("code",[t._v("0")]),t._v("。")]),t._v(" "),a("li",[t._v("枚举成员使用"),a("em",[t._v("常数枚举表达式")]),t._v("初始化。 常数枚举表达式是TypeScript表达式的子集，它可以在编译阶段求值。 当一个表达式满足下面条件之一时，它就是一个常数枚举表达式：\n"),a("ul",[a("li",[t._v("数字字面量")]),t._v(" "),a("li",[t._v("引用之前定义的常数枚举成员（可以是在不同的枚举类型中定义的） 如果这个成员是在同一个枚举类型中定义的，可以使用非限定名来引用。")]),t._v(" "),a("li",[t._v("带括号的常数枚举表达式")]),t._v(" "),a("li",[a("code",[t._v("+")]),t._v(", "),a("code",[t._v("-")]),t._v(", "),a("code",[t._v("~")]),t._v(" 一元运算符应用于常数枚举表达式")]),t._v(" "),a("li",[a("code",[t._v("+")]),t._v(", "),a("code",[t._v("-")]),t._v(", "),a("code",[t._v("*")]),t._v(", "),a("code",[t._v("/")]),t._v(", "),a("code",[t._v("%")]),t._v(", "),a("code",[t._v("<<")]),t._v(", "),a("code",[t._v(">>")]),t._v(", "),a("code",[t._v(">>>")]),t._v(", "),a("code",[t._v("&")]),t._v(", "),a("code",[t._v("|")]),t._v(", "),a("code",[t._v("^")]),t._v(" 二元运算符，常数枚举表达式做为其一个操作对象 若常数枚举表达式求值后为"),a("code",[t._v("NaN")]),t._v("或"),a("code",[t._v("Infinity")]),t._v("，则会在编译阶段报错。")])])])]),t._v(" "),a("p",[t._v("所有其它情况的枚举成员被当作是需要计算得出的值。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('enum FileAccess {\n    // constant members\n    None,\n    Read    = 1 << 1,\n    Write   = 1 << 2,\n    ReadWrite  = Read | Write\n    // computed member\n    G = "123".length\n}\n')])])]),a("p",[t._v("枚举是在运行时真正存在的一个对象。 其中一个原因是因为这样可以从枚举值到枚举名进行反向映射。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('enum Enum {\n    A\n}\nlet a = Enum.A;\nlet nameOfA = Enum[Enum.A]; // "A"\n')])])]),a("p",[t._v("编译成：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("Enum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Enum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Enum "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" nameOfA "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Enum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "A"')]),t._v("\n")])])]),a("p",[t._v("生成的代码中，枚举类型被编译成一个对象，它包含双向映射（"),a("code",[t._v("name")]),t._v(" -> "),a("code",[t._v("value")]),t._v("）和（"),a("code",[t._v("value")]),t._v(" -> "),a("code",[t._v("name")]),t._v("）。 引用枚举成员总会生成一次属性访问并且永远不会内联。 在大多数情况下这是很好的并且正确的解决方案。 然而有时候需求却比较严格。 当访问枚举值时，为了避免生成多余的代码和间接引用，可以使用常数枚举。 常数枚举是在"),a("code",[t._v("enum")]),t._v("关键字前使用"),a("code",[t._v("const")]),t._v("修饰符。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const enum Enum {\n    A = 1,\n    B = A * 2\n}\n")])])]),a("p",[t._v("常数枚举只能使用常数枚举表达式并且不同于常规的枚举的是它们在编译阶段会被删除。 常数枚举成员在使用的地方被内联进来。 这是因为常数枚举不可能有计算成员。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("const enum Directions {\n    Up,\n    Down,\n    Left,\n    Right\n}\n\nlet directions = [Directions.Up, Directions.Down, Directions.Left, Directions.Right]\n")])])]),a("p",[t._v("生成后的代码为：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" directions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Up */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Down */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Left */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Right */")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"外部枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#外部枚举"}},[t._v("#")]),t._v(" 外部枚举")]),t._v(" "),a("p",[t._v("外部枚举用来描述已经存在的枚举类型的形状。")]),t._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("declare enum Enum {\n    A = 1,\n    B,\n    C = 2\n}\n")])])]),a("p",[t._v("外部枚举和非外部枚举之间有一个重要的区别，在正常的枚举里，没有初始化方法的成员被当成常数成员。 对于非常数的外部枚举而言，没有初始化方法时被当做需要经过计算的。")])])}),[],!1,null,null,null);s.default=e.exports}}]);