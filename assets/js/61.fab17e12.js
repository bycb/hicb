(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{580:function(e,t,a){"use strict";a.r(t);var r=a(8),n=Object(r.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[e._v("#")]),e._v(" 介绍")]),e._v(" "),a("p",[e._v("函数是JavaScript应用程序的基础。 它帮助你实现抽象层，模拟类，信息隐藏和模块。 在TypeScript里，虽然已经支持类，命名空间和模块，但函数仍然是主要的定义"),a("em",[e._v("行为")]),e._v("的地方。 TypeScript为JavaScript函数添加了额外的功能，让我们可以更容易地使用。")]),e._v(" "),a("h2",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[e._v("#")]),e._v(" 函数")]),e._v(" "),a("p",[e._v("和JavaScript一样，TypeScript函数可以创建有名字的函数和匿名函数。 你可以随意选择适合应用程序的方式，不论是定义一系列API函数还是只使用一次的函数。")]),e._v(" "),a("p",[e._v("通过下面的例子可以迅速回想起这两种JavaScript中的函数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// Named function\nfunction add(x, y) {\n    return x + y;\n}\n\n// Anonymous function\nlet myAdd = function(x, y) { return x + y; };\n")])])]),a("p",[e._v("在JavaScript里，函数可以使用函数体外部的变量。 当函数这么做时，我们说它‘捕获’了这些变量。 至于为什么可以这样做以及其中的利弊超出了本文的范围，但是深刻理解这个机制对学习JavaScript和TypeScript会很有帮助。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let z = 100;\n\nfunction addToZ(x, y) {\n    return x + y + z;\n}\n")])])]),a("h2",{attrs:{id:"函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型"}},[e._v("#")]),e._v(" 函数类型")]),e._v(" "),a("h2",{attrs:{id:"为函数定义类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为函数定义类型"}},[e._v("#")]),e._v(" 为函数定义类型")]),e._v(" "),a("p",[e._v("让我们为上面那个函数添加类型：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function add(x: number, y: number): number {\n    return x + y;\n}\n\nlet myAdd = function(x: number, y: number): number { return x+y; };\n")])])]),a("p",[e._v("我们可以给每个参数添加类型之后再为函数本身添加返回值类型。 TypeScript能够根据返回语句自动推断出返回值类型，因此我们通常省略它。")]),e._v(" "),a("h2",{attrs:{id:"书写完整函数类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#书写完整函数类型"}},[e._v("#")]),e._v(" 书写完整函数类型")]),e._v(" "),a("p",[e._v("现在我们已经为函数指定了类型，下面让我们写出函数的完整类型。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let myAdd: (x:number, y:number)=>number =\n    function(x: number, y: number): number { return x+y; };\n")])])]),a("p",[e._v("函数类型包含两部分：参数类型和返回值类型。 当写出完整函数类型的时候，这两部分都是需要的。 我们以参数列表的形式写出参数类型，为每个参数指定一个名字和类型。 这个名字只是为了增加可读性。 我们也可以这么写：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let myAdd: (baseValue:number, increment:number) => number =\n    function(x: number, y: number): number { return x + y; };\n")])])]),a("p",[e._v("只要参数类型是匹配的，那么就认为它是有效的函数类型，而不在乎参数名是否正确。")]),e._v(" "),a("p",[e._v("第二部分是返回值类型。 对于返回值，我们在函数和返回值类型之前使用("),a("code",[e._v("=>")]),e._v(")符号，使之清晰明了。 如之前提到的，返回值类型是函数类型的必要部分，如果函数没有返回任何值，你也必须指定返回值类型为"),a("code",[e._v("void")]),e._v("而不能留空。")]),e._v(" "),a("p",[e._v("函数的类型只是由参数类型和返回值组成的。 函数中使用的捕获变量不会体现在类型里。 实际上，这些变量是函数的隐藏状态并不是组成API的一部分。")]),e._v(" "),a("h2",{attrs:{id:"推断类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#推断类型"}},[e._v("#")]),e._v(" 推断类型")]),e._v(" "),a("p",[e._v("尝试这个例子的时候，你会发现如果你在赋值语句的一边指定了类型但是另一边没有类型的话，TypeScript编译器会自动识别出类型：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("// myAdd has the full function type\nlet myAdd = function(x: number, y: number): number { return x + y; };\n\n// The parameters `x` and `y` have the type number\nlet myAdd: (baseValue:number, increment:number) => number =\n    function(x, y) { return x + y; };\n")])])]),a("p",[e._v("这叫做“按上下文归类”，是类型推论的一种。 它帮助我们更好地为程序指定类型。")]),e._v(" "),a("h2",{attrs:{id:"可选参数和默认参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#可选参数和默认参数"}},[e._v("#")]),e._v(" 可选参数和默认参数")]),e._v(" "),a("p",[e._v("TypeScript里的每个函数参数都是必须的。 这不是指不能传递"),a("code",[e._v("null")]),e._v("或"),a("code",[e._v("undefined")]),e._v("作为参数，而是说编译器检查用户是否为每个参数都传入了值。 编译器还会假设只有这些参数会被传递进函数。 简短地说，传递给一个函数的参数个数必须与函数期望的参数个数一致。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function buildName(firstName: string, lastName: string) {\n    return firstName + " " + lastName;\n}\n\nlet result1 = buildName("Bob");                  // error, too few parameters\nlet result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters\nlet result3 = buildName("Bob", "Adams");         // ah, just right\n')])])]),a("p",[e._v("JavaScript里，每个参数都是可选的，可传可不传。 没传参的时候，它的值就是undefined。 在TypeScript里我们可以在参数名旁使用"),a("code",[e._v("?")]),e._v("实现可选参数的功能。 比如，我们想让last name是可选的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function buildName(firstName: string, lastName?: string) {\n    if (lastName)\n        return firstName + " " + lastName;\n    else\n        return firstName;\n}\n\nlet result1 = buildName("Bob");  // works correctly now\nlet result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters\nlet result3 = buildName("Bob", "Adams");  // ah, just right\n')])])]),a("p",[e._v("可选参数必须跟在必须参数后面。 如果上例我们想让first name是可选的，那么就必须调整它们的位置，把first name放在后面。")]),e._v(" "),a("p",[e._v("在TypeScript里，我们也可以为参数提供一个默认值当用户没有传递这个参数或传递的值是"),a("code",[e._v("undefined")]),e._v("时。 它们叫做有默认初始化值的参数。 让我们修改上例，把last name的默认值设置为"),a("code",[e._v('"Smith"')]),e._v("。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function buildName(firstName: string, lastName = "Smith") {\n    return firstName + " " + lastName;\n}\n\nlet result1 = buildName("Bob");                  // works correctly now, returns "Bob Smith"\nlet result2 = buildName("Bob", undefined);       // still works, also returns "Bob Smith"\nlet result3 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters\nlet result4 = buildName("Bob", "Adams");         // ah, just right\n')])])]),a("p",[e._v("在所有必须参数后面的带默认初始化的参数都是可选的，与可选参数一样，在调用函数的时候可以省略。 也就是说可选参数与末尾的默认参数共享参数类型。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function buildName(firstName: string, lastName?: string) {\n    // ...\n}\n")])])]),a("p",[e._v("和")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function buildName(firstName: string, lastName = "Smith") {\n    // ...\n}\n')])])]),a("p",[e._v("共享同样的类型"),a("code",[e._v("(firstName: string, lastName?: string) => string")]),e._v("。 默认参数的默认值消失了，只保留了它是一个可选参数的信息。")]),e._v(" "),a("p",[e._v("与普通可选参数不同的是，带默认值的参数不需要放在必须参数的后面。 如果带默认值的参数出现在必须参数前面，用户必须明确的传入"),a("code",[e._v("undefined")]),e._v("值来获得默认值。 例如，我们重写最后一个例子，让"),a("code",[e._v("firstName")]),e._v("是带默认值的参数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function buildName(firstName = "Will", lastName: string) {\n    return firstName + " " + lastName;\n}\n\nlet result1 = buildName("Bob");                  // error, too few parameters\nlet result2 = buildName("Bob", "Adams", "Sr.");  // error, too many parameters\nlet result3 = buildName("Bob", "Adams");         // okay and returns "Bob Adams"\nlet result4 = buildName(undefined, "Adams");     // okay and returns "Will Adams"\n')])])]),a("h2",{attrs:{id:"剩余参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#剩余参数"}},[e._v("#")]),e._v(" 剩余参数")]),e._v(" "),a("p",[e._v("必要参数，默认参数和可选参数有个共同点：它们表示某一个参数。 有时，你想同时操作多个参数，或者你并不知道会有多少参数传递进来。 在JavaScript里，你可以使用"),a("code",[e._v("arguments")]),e._v("来访问所有传入的参数。")]),e._v(" "),a("p",[e._v("在TypeScript里，你可以把所有参数收集到一个变量里：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + " " + restOfName.join(" ");\n}\n\nlet employeeName = buildName("Joseph", "Samuel", "Lucas", "MacKinzie");\n')])])]),a("p",[e._v("剩余参数会被当做个数不限的可选参数。 可以一个都没有，同样也可以有任意个。 编译器创建参数数组，名字是你在省略号（"),a("code",[e._v("...")]),e._v("）后面给定的名字，你可以在函数体内使用这个数组。")]),e._v(" "),a("p",[e._v("这个省略号也会在带有剩余参数的函数类型定义上使用到：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function buildName(firstName: string, ...restOfName: string[]) {\n  return firstName + " " + restOfName.join(" ");\n}\n\nlet buildNameFun: (fname: string, ...rest: string[]) => string = buildName;\n')])])]),a("h2",{attrs:{id:"this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this"}},[e._v("#")]),e._v(" "),a("code",[e._v("this")])]),e._v(" "),a("p",[e._v("学习使用JavaScript里"),a("code",[e._v("this")]),e._v("就好比一场成年礼。 由于TypeScript是JavaScript的超集，TypeScript程序员也需要弄清"),a("code",[e._v("this")]),e._v("工作机制并且当有bug的时候能够找出错误所在。 幸运的是，TypeScript能通知你错误地使用了"),a("code",[e._v("this")]),e._v("的地方。 如果你想了解JavaScript里的"),a("code",[e._v("this")]),e._v("是如何工作的，那么首先阅读Yehuda Katz写的"),a("a",{attrs:{href:"http://yehudakatz.com/2011/08/11/understanding-javascript-function-invocation-and-this/",target:"_blank",rel:"noopener noreferrer"}},[e._v('Understanding JavaScript Function Invocation and "this"'),a("OutboundLink")],1),e._v("。 Yehuda的文章详细的阐述了"),a("code",[e._v("this")]),e._v("的内部工作原理，因此我们这里只做简单介绍。")]),e._v(" "),a("h2",{attrs:{id:"this和箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this和箭头函数"}},[e._v("#")]),e._v(" "),a("code",[e._v("this")]),e._v("和箭头函数")]),e._v(" "),a("p",[e._v("JavaScript里，"),a("code",[e._v("this")]),e._v("的值在函数被调用的时候才会指定。 这是个既强大又灵活的特点，但是你需要花点时间弄清楚函数调用的上下文是什么。 但众所周知，这不是一件很简单的事，尤其是在返回一个函数或将函数当做参数传递的时候。")]),e._v(" "),a("p",[e._v("下面看一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let deck = {\n    suits: ["hearts", "spades", "clubs", "diamonds"],\n    cards: Array(52),\n    createCardPicker: function() {\n        return function() {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert("card: " + pickedCard.card + " of " + pickedCard.suit);\n')])])]),a("p",[e._v("可以看到"),a("code",[e._v("createCardPicker")]),e._v("是个函数，并且它又返回了一个函数。 如果我们尝试运行这个程序，会发现它并没有弹出对话框而是报错了。 因为"),a("code",[e._v("createCardPicker")]),e._v("返回的函数里的"),a("code",[e._v("this")]),e._v("被设置成了"),a("code",[e._v("window")]),e._v("而不是"),a("code",[e._v("deck")]),e._v("对象。 因为我们只是独立的调用了"),a("code",[e._v("cardPicker()")]),e._v("。 顶级的非方法式调用会将"),a("code",[e._v("this")]),e._v("视为"),a("code",[e._v("window")]),e._v("。 （注意：在严格模式下，"),a("code",[e._v("this")]),e._v("为"),a("code",[e._v("undefined")]),e._v("而不是"),a("code",[e._v("window")]),e._v("）。")]),e._v(" "),a("p",[e._v("为了解决这个问题，我们可以在函数被返回时就绑好正确的"),a("code",[e._v("this")]),e._v("。 这样的话，无论之后怎么使用它，都会引用绑定的‘deck’对象。 我们需要改变函数表达式来使用ECMAScript 6箭头语法。 箭头函数能保存函数创建时的"),a("code",[e._v("this")]),e._v("值，而不是调用时的值：")]),e._v(" "),a("p",[e._v("我们把函数表达式变为使用lambda表达式（ () => {} ）。 这样就会在函数创建的时候就指定了‘this’值，而不是在函数调用的时候。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let deck = {\n    suits: ["hearts", "spades", "clubs", "diamonds"],\n    cards: Array(52),\n    createCardPicker: function() {\n        // NOTE: the line below is now an arrow function, allowing us to capture \'this\' right here\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert("card: " + pickedCard.card + " of " + pickedCard.suit);\n')])])]),a("p",[e._v("更好事情是，TypeScript会警告你犯了一个错误，如果你给编译器设置了"),a("code",[e._v("--noImplicitThis")]),e._v("标记。 它会指出"),a("code",[e._v("this.suits[pickedSuit]")]),e._v("里的"),a("code",[e._v("this")]),e._v("的类型为"),a("code",[e._v("any")]),e._v("。")]),e._v(" "),a("h2",{attrs:{id:"this参数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this参数"}},[e._v("#")]),e._v(" "),a("code",[e._v("this")]),e._v("参数")]),e._v(" "),a("p",[e._v("不幸的是，"),a("code",[e._v("this.suits[pickedSuit]")]),e._v("的类型依旧为"),a("code",[e._v("any")]),e._v("。 这是因为"),a("code",[e._v("this")]),e._v("来自对象字面量里的函数表达式。 修改的方法是，提供一个显示的"),a("code",[e._v("this")]),e._v("参数。 "),a("code",[e._v("this")]),e._v("参数是个假的参数，它出现在参数列表的最前面：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function f(this: void) {\n    // make sure `this` is unusable in this standalone function\n}\n")])])]),a("p",[e._v("让我们往例子里添加一些接口，"),a("code",[e._v("Card")]),e._v(" 和 "),a("code",[e._v("Deck")]),e._v("，让类型重用能够变得清晰简单些：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('interface Card {\n    suit: string;\n    card: number;\n}\ninterface Deck {\n    suits: string[];\n    cards: number[];\n    createCardPicker(this: Deck): () => Card;\n}\nlet deck: Deck = {\n    suits: ["hearts", "spades", "clubs", "diamonds"],\n    cards: Array(52),\n    // NOTE: The function now explicitly specifies that its callee must be of type Deck\n    createCardPicker: function(this: Deck) {\n        return () => {\n            let pickedCard = Math.floor(Math.random() * 52);\n            let pickedSuit = Math.floor(pickedCard / 13);\n\n            return {suit: this.suits[pickedSuit], card: pickedCard % 13};\n        }\n    }\n}\n\nlet cardPicker = deck.createCardPicker();\nlet pickedCard = cardPicker();\n\nalert("card: " + pickedCard.card + " of " + pickedCard.suit);\n')])])]),a("p",[e._v("现在TypeScript知道"),a("code",[e._v("createCardPicker")]),e._v("期望在某个"),a("code",[e._v("Deck")]),e._v("对象上调用。 也就是说"),a("code",[e._v("this")]),e._v("是"),a("code",[e._v("Deck")]),e._v("类型的，而非"),a("code",[e._v("any")]),e._v("，因此"),a("code",[e._v("--noImplicitThis")]),e._v("不会报错了。")]),e._v(" "),a("h3",{attrs:{id:"this参数在回调函数里"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#this参数在回调函数里"}},[e._v("#")]),e._v(" "),a("code",[e._v("this")]),e._v("参数在回调函数里")]),e._v(" "),a("p",[e._v("你可以也看到过在回调函数里的"),a("code",[e._v("this")]),e._v("报错，当你将一个函数传递到某个库函数里稍后会被调用时。 因为当回调被调用的时候，它们会被当成一个普通函数调用，"),a("code",[e._v("this")]),e._v("将为"),a("code",[e._v("undefined")]),e._v("。 稍做改动，你就可以通过"),a("code",[e._v("this")]),e._v("参数来避免错误。 首先，库函数的作者要指定"),a("code",[e._v("this")]),e._v("的类型：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("interface UIElement {\n    addClickListener(onclick: (this: void, e: Event) => void): void;\n}\n")])])]),a("p",[a("code",[e._v("this: void")]),e._v(" means that "),a("code",[e._v("addClickListener")]),e._v(" expects "),a("code",[e._v("onclick")]),e._v(" to be a function that does not require a "),a("code",[e._v("this")]),e._v(" type. Second, annotate your calling code with "),a("code",[e._v("this")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Handler {\n    info: string;\n    onClickBad(this: Handler, e: Event) {\n        // oops, used this here. using this callback would crash at runtime\n        this.info = e.message;\n    };\n}\nlet h = new Handler();\nuiElement.addClickListener(h.onClickBad); // error!\n")])])]),a("p",[e._v("指定了"),a("code",[e._v("this")]),e._v("类型后，你显示声明"),a("code",[e._v("onClickBad")]),e._v("必须在"),a("code",[e._v("Handler")]),e._v("的实例上调用。 然后TypeScript会检测到"),a("code",[e._v("addClickListener")]),e._v("要求函数带有"),a("code",[e._v("this: void")]),e._v("。 改变"),a("code",[e._v("this")]),e._v("类型来修复这个错误：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Handler {\n    info: string;\n    onClickGood(this: void, e: Event) {\n        // can't use this here because it's of type void!\n        console.log('clicked!');\n    }\n}\nlet h = new Handler();\nuiElement.addClickListener(h.onClickGood);\n")])])]),a("p",[e._v("因为"),a("code",[e._v("onClickGood")]),e._v("指定了"),a("code",[e._v("this")]),e._v("类型为"),a("code",[e._v("void")]),e._v("，因此传递"),a("code",[e._v("addClickListener")]),e._v("是合法的。 当然了，这也意味着不能使用"),a("code",[e._v("this.info")]),e._v(". 如果你两者都想要，你不得不使用箭头函数了：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Handler {\n    info: string;\n    onClickGood = (e: Event) => { this.info = e.message }\n}\n")])])]),a("p",[e._v("这是可行的因为箭头函数不会捕获"),a("code",[e._v("this")]),e._v("，所以你总是可以把它们传给期望"),a("code",[e._v("this: void")]),e._v("的函数。 缺点是每个"),a("code",[e._v("Handler")]),e._v("对象都会创建一个箭头函数。 另一方面，方法只会被创建一次，添加到"),a("code",[e._v("Handler")]),e._v("的原型链上。 它们在不同"),a("code",[e._v("Handler")]),e._v("对象间是共享的。")]),e._v(" "),a("h2",{attrs:{id:"重载"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重载"}},[e._v("#")]),e._v(" 重载")]),e._v(" "),a("p",[e._v("JavaScript本身是个动态语言。 JavaScript里函数根据传入不同的参数而返回不同类型的数据是很常见的。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let suits = ["hearts", "spades", "clubs", "diamonds"];\n\nfunction pickCard(x): any {\n    // Check to see if we\'re working with an object/array\n    // if so, they gave us the deck and we\'ll pick the card\n    if (typeof x == "object") {\n        let pickedCard = Math.floor(Math.random() * x.length);\n        return pickedCard;\n    }\n    // Otherwise just let them pick the card\n    else if (typeof x == "number") {\n        let pickedSuit = Math.floor(x / 13);\n        return { suit: suits[pickedSuit], card: x % 13 };\n    }\n}\n\nlet myDeck = [{ suit: "diamonds", card: 2 }, { suit: "spades", card: 10 }, { suit: "hearts", card: 4 }];\nlet pickedCard1 = myDeck[pickCard(myDeck)];\nalert("card: " + pickedCard1.card + " of " + pickedCard1.suit);\n\nlet pickedCard2 = pickCard(15);\nalert("card: " + pickedCard2.card + " of " + pickedCard2.suit);\n')])])]),a("p",[a("code",[e._v("pickCard")]),e._v("方法根据传入参数的不同会返回两种不同的类型。 如果传入的是代表纸牌的对象，函数作用是从中抓一张牌。 如果用户想抓牌，我们告诉他抓到了什么牌。 但是这怎么在类型系统里表示呢。")]),e._v(" "),a("p",[e._v("方法是为同一个函数提供多个函数类型定义来进行函数重载。 编译器会根据这个列表去处理函数的调用。 下面我们来重载"),a("code",[e._v("pickCard")]),e._v("函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let suits = ["hearts", "spades", "clubs", "diamonds"];\n\nfunction pickCard(x: {suit: string; card: number; }[]): number;\nfunction pickCard(x: number): {suit: string; card: number; };\nfunction pickCard(x): any {\n    // Check to see if we\'re working with an object/array\n    // if so, they gave us the deck and we\'ll pick the card\n    if (typeof x == "object") {\n        let pickedCard = Math.floor(Math.random() * x.length);\n        return pickedCard;\n    }\n    // Otherwise just let them pick the card\n    else if (typeof x == "number") {\n        let pickedSuit = Math.floor(x / 13);\n        return { suit: suits[pickedSuit], card: x % 13 };\n    }\n}\n\nlet myDeck = [{ suit: "diamonds", card: 2 }, { suit: "spades", card: 10 }, { suit: "hearts", card: 4 }];\nlet pickedCard1 = myDeck[pickCard(myDeck)];\nalert("card: " + pickedCard1.card + " of " + pickedCard1.suit);\n\nlet pickedCard2 = pickCard(15);\nalert("card: " + pickedCard2.card + " of " + pickedCard2.suit);\n')])])]),a("p",[e._v("这样改变后，重载的"),a("code",[e._v("pickCard")]),e._v("函数在调用的时候会进行正确的类型检查。")]),e._v(" "),a("p",[e._v("为了让编译器能够选择正确的检查类型，它与JavaScript里的处理流程相似。 它查找重载列表，尝试使用第一个重载定义。 如果匹配的话就使用这个。 因此，在定义重载的时候，一定要把最精确的定义放在最前面。")]),e._v(" "),a("p",[e._v("注意，"),a("code",[e._v("function pickCard(x): any")]),e._v("并不是重载列表的一部分，因此这里只有两个重载：一个是接收对象另一个接收数字。 以其它参数调用"),a("code",[e._v("pickCard")]),e._v("会产生错误。")])])}),[],!1,null,null,null);t.default=n.exports}}]);